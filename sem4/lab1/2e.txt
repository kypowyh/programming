#include <stdio.h>
#include <stdlib.h>

#define STACK_SIZE 100

// Структура стека
typedef struct Stack {
    char data[STACK_SIZE];
    int top;
} Stack;

// Инициализация стека
void initStack(Stack* stack) {
    stack->top = -1;
}

// Проверка, пуст ли стек
int isEmpty(Stack* stack) {
    return stack->top == -1;
}

// Проверка, полон ли стек
int isFull(Stack* stack) {
    return stack->top == STACK_SIZE - 1;
}

// Помещение элемента в стек
void push(Stack* stack, char value) {
    if (isFull(stack)) {
        printf("Стек полон\n");
        exit(EXIT_FAILURE);
    }
    stack->data[++stack->top] = value;
}

// Извлечение элемента из стека
char pop(Stack* stack) {
    if (isEmpty(stack)) {
        printf("Стек пуст\n");
        exit(EXIT_FAILURE);
    }
    return stack->data[stack->top--];
}

// Проверка, является ли символ скобкой
int isBracket(char symbol) {
    return symbol == '(' || symbol == ')' || symbol == '[' || symbol == ']' || symbol == '{' || symbol == '}';
}

// Проверка, являются ли пары скобок правильно сбалансированными
int Balanced(char* expression) {
    Stack stack;
    initStack(&stack);

    for (int i = 0; expression[i] != '\0'; i++) {
        char currentChar = expression[i];

        if (isBracket(currentChar)) {
            if (currentChar == '(' || currentChar == '[' || currentChar == '{') {
                push(&stack, currentChar);
            }
            else {
                if (isEmpty(&stack)) {
                    return 0; 
                }

                char topBracket = pop(&stack);

                if ((currentChar == ')' && topBracket != '(') ||
                    (currentChar == ']' && topBracket != '[') ||
                    (currentChar == '}' && topBracket != '{')) {
                    return 0; 
                }
            }
        }
    }

    return isEmpty(&stack);
}

int main() {
    char string[] = "{[]}";

    if (Balanced(string)) {
        printf("Yes\n");
    }
    else {
        printf("No\n");
    }

    return 0;
}